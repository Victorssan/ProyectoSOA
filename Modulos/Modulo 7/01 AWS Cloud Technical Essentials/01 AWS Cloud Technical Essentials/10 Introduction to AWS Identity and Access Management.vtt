WEBVTT

1
00:00:00.930 --> 00:00:02.520
- Echemos un vistazo a la aplicación

2
00:00:02.520 --> 00:00:05.490
que vamos a ir construyendo a lo largo del curso.

3
00:00:05.490 --> 00:00:08.340
Ya hemos repasado el diseño de esta aplicación

4
00:00:08.340 --> 00:00:11.940
y en lo que quiero centrarme ahora es en el control de acceso.

5
00:00:11.940 --> 00:00:13.830
Hay múltiples lugares en este diagrama

6
00:00:13.830 --> 00:00:15.480
en los que podemos identificar la necesidad

7
00:00:15.480 --> 00:00:18.240
de control de acceso y gestión de credenciales.

8
00:00:18.240 --> 00:00:21.300
El primero es que necesitamos gestionar cómo los usuarios inician sesión

9
00:00:21.300 --> 00:00:24.090
y utilizan la aplicación del directorio de empleados.

10
00:00:24.090 --> 00:00:26.430
Podríamos exigir que la gente tenga una credencial válida

11
00:00:26.430 --> 00:00:29.550
como un nombre de usuario y una contraseña para iniciar sesión en la aplicación.

12
00:00:29.550 --> 00:00:33.420
Eso es gestión de acceso a nivel de aplicación.

13
00:00:33.420 --> 00:00:35.220
Luego está el hecho de que sabemos que el código

14
00:00:35.220 --> 00:00:37.260
que ejecuta la aplicación del directorio de empleados

15
00:00:37.260 --> 00:00:39.240
en una máquina virtual que está siendo alojada

16
00:00:39.240 --> 00:00:41.190
por el servicio Amazon EC2

17
00:00:41.190 --> 00:00:43.560
y ese código necesitará hacer llamadas API

18
00:00:43.560 --> 00:00:46.530
al servicio de almacenamiento de objetos Amazon S3

19
00:00:46.530 --> 00:00:48.420
para leer y escribir datos

20
00:00:48.420 --> 00:00:50.820
como imágenes para los empleados.

21
00:00:50.820 --> 00:00:51.930
Bueno, aquí está la cosa.

22
00:00:51.930 --> 00:00:55.080
El hecho de que tanto Amazon EC2 como Amazon S3

23
00:00:55.080 --> 00:00:57.780
tengan recursos existentes en esta cuenta,

24
00:00:57.780 --> 00:00:59.640
no significa que las llamadas API

25
00:00:59.640 --> 00:01:03.420
realizadas desde el código que se ejecuta en la instancia EC2 a S3

26
00:01:03.420 --> 00:01:05.850
estén automáticamente autorizadas.

27
00:01:05.850 --> 00:01:09.450
De hecho, todas las llamadas API en AWS deben estar tanto firmadas

28
00:01:09.450 --> 00:01:12.060
como autenticadas para ser permitidas,

29
00:01:12.060 --> 00:01:16.320
no importa si los recursos viven en la misma cuenta o no.

30
00:01:16.320 --> 00:01:19.800
El código de la aplicación que se ejecuta en la instancia de Amazon EC2

31
00:01:19.800 --> 00:01:21.660
necesita acceso a las credenciales

32
00:01:21.660 --> 00:01:25.080
para realizar esta llamada API firmada a Amazon S3.

33
00:01:25.080 --> 00:01:28.110
Así que ese es otro lugar con una necesidad de una credencial

34
00:01:28.110 --> 00:01:30.000
y gestión de acceso.

35
00:01:30.000 --> 00:01:32.010
Ahora vamos a dar un paso más.

36
00:01:32.010 --> 00:01:35.280
¿Cómo va a construir esta arquitectura?

37
00:01:35.280 --> 00:01:37.590
Bueno, usted necesitará acceso a una cuenta de AWS

38
00:01:37.590 --> 00:01:39.660
mediante el uso de un inicio de sesión.

39
00:01:39.660 --> 00:01:41.850
Su identidad dentro de esta cuenta AWS

40
00:01:41.850 --> 00:01:44.040
necesitará permisos para poder hacer cosas

41
00:01:44.040 --> 00:01:47.100
como crear esta red, lanzar las instancias EC2

42
00:01:47.100 --> 00:01:49.470
y crear los recursos que alojarán

43
00:01:49.470 --> 00:01:51.990
y ejecutarán la solución en AWS.

44
00:01:51.990 --> 00:01:54.660
Otro lugar donde necesita credenciales.

45
00:01:54.660 --> 00:01:56.880
El usuario root del que ya ha aprendido

46
00:01:56.880 --> 00:01:59.400
en una lección anterior tiene estos permisos,

47
00:01:59.400 --> 00:02:01.950
pero no querrá estar usando el usuario root

48
00:02:01.950 --> 00:02:04.500
para administrar sus recursos AWS.

49
00:02:04.500 --> 00:02:07.470
Y asumamos que no será el único trabajando en

50
00:02:07.470 --> 00:02:09.660
o construyendo esta aplicación.

51
00:02:09.660 --> 00:02:12.210
Es más probable que dentro de una cuenta AWS

52
00:02:12.210 --> 00:02:14.970
haya muchas personas que necesiten acceso para construir

53
00:02:14.970 --> 00:02:16.770
y dar soporte a sus soluciones.

54
00:02:16.770 --> 00:02:19.140
Tendrá diferentes grupos de personas responsables

55
00:02:19.140 --> 00:02:21.450
de diferentes partes de la arquitectura.

56
00:02:21.450 --> 00:02:23.790
Las personas que escribirían y desplegarían el código

57
00:02:23.790 --> 00:02:25.140
podrían ser desarrolladores de software,

58
00:02:25.140 --> 00:02:26.970
mientras que las personas que serían responsables

59
00:02:26.970 --> 00:02:29.220
de realizar cambios en, digamos, la red

60
00:02:29.220 --> 00:02:31.500
serían un grupo diferente de personas.

61
00:02:31.500 --> 00:02:33.870
No daría ni debería dar a todo el mundo

62
00:02:33.870 --> 00:02:35.940
que necesite acceso a la cuenta de AWS,

63
00:02:35.940 --> 00:02:38.520
las credenciales de usuario raíz para iniciar sesión.

64
00:02:38.520 --> 00:02:40.440
En su lugar, tendría credenciales únicas

65
00:02:40.440 --> 00:02:42.390
para cada persona que inicie sesión.

66
00:02:42.390 --> 00:02:44.670
Aquí es donde entra en juego el servicio AWS identity

67
00:02:44.670 --> 00:02:46.560
and access management.

68
00:02:46.560 --> 00:02:48.725
Hemos identificado tres lugares en los que necesitaremos acceso

69
00:02:48.725 --> 00:02:50.828
y gestión de credenciales.

70
00:02:50.828 --> 00:02:53.940
AWS identity and access management o IAM

71
00:02:53.940 --> 00:02:57.685
puede ayudar a ocuparse de estos dos puntos del diagrama.

72
00:02:57.685 --> 00:03:00.090
AWS IAM gestiona las credenciales de inicio de sesión

73
00:03:00.090 --> 00:03:02.340
y los permisos de la cuenta de AWS

74
00:03:02.340 --> 00:03:04.320
y también puede gestionar las credenciales

75
00:03:04.320 --> 00:03:08.490
utilizadas para firmar las llamadas API realizadas a los servicios de AWS.

76
00:03:08.490 --> 00:03:10.770
IAM no sería, sin embargo, responsable

77
00:03:10.770 --> 00:03:13.560
de la gestión de acceso a nivel de aplicación.

78
00:03:13.560 --> 00:03:15.540
El código que se ejecuta en esta instancia utilizaría

79
00:03:15.540 --> 00:03:18.450
mecanismos apropiados separados para autenticar a los usuarios

80
00:03:18.450 --> 00:03:21.810
en la propia aplicación, no IAM.

81
00:03:21.810 --> 00:03:25.290
Muy bien, así que vamos a empezar con el nivel de cuenta de AWS.

82
00:03:25.290 --> 00:03:27.240
IAM le permite crear usuarios

83
00:03:27.240 --> 00:03:30.060
y cada persona individual que necesita acceso

84
00:03:30.060 --> 00:03:33.960
a su cuenta de AWS tendría su propio usuario IAM único.

85
00:03:33.960 --> 00:03:36.450
La creación de usuarios para todos los que necesitan acceso a la cuenta,

86
00:03:36.450 --> 00:03:38.430
se encarga de la autenticación.

87
00:03:38.430 --> 00:03:39.900
Autenticación es verificar

88
00:03:39.900 --> 00:03:41.460
si alguien es quien dice ser

89
00:03:41.460 --> 00:03:44.670
porque tenía las credenciales adecuadas para iniciar sesión.

90
00:03:44.670 --> 00:03:47.130
Ahora es el momento de introducir la autorización.

91
00:03:47.130 --> 00:03:48.660
La autorización es esto.

92
00:03:48.660 --> 00:03:51.510
Digamos que usted ha iniciado sesión y usted es quien dice ser.

93
00:03:51.510 --> 00:03:53.220
Usted ha sido autenticado.

94
00:03:53.220 --> 00:03:56.730
Ahora desea crear recursos y administrar los recursos de AWS

95
00:03:56.730 --> 00:03:59.730
como crear una instancia de Amazon EC2 por ejemplo.

96
00:03:59.730 --> 00:04:00.990
Claro, ha iniciado sesión

97
00:04:00.990 --> 00:04:03.060
pero ¿tiene los permisos correctos

98
00:04:03.060 --> 00:04:05.640
para poder completar esa acción?

99
00:04:05.640 --> 00:04:07.230
La idea de que sus permisos controlan

100
00:04:07.230 --> 00:04:10.200
lo que puede o no puede hacer es la autorización.

101
00:04:10.200 --> 00:04:13.650
¿Está autorizado para lanzar una instancia EC2?

102
00:04:13.650 --> 00:04:15.990
Los usuarios IAM se encargan de la autenticación

103
00:04:15.990 --> 00:04:18.000
y usted puede encargarse de la autorización

104
00:04:18.000 --> 00:04:20.580
adjuntando políticas IAM a los usuarios

105
00:04:20.580 --> 00:04:24.540
para conceder o denegar el permiso a acciones específicas

106
00:04:24.540 --> 00:04:26.610
dentro de una cuenta AWS.

107
00:04:26.610 --> 00:04:28.500
Tenga en cuenta que cuando digo acción aquí,

108
00:04:28.500 --> 00:04:30.960
me estoy refiriendo a una llamada a la API de AWS.

109
00:04:30.960 --> 00:04:33.870
Todo en AWS es una llamada a la API.

110
00:04:33.870 --> 00:04:36.570
Las políticas IAM son documentos basados en JSON.

111
00:04:36.570 --> 00:04:38.700
Veamos un ejemplo.

112
00:04:38.700 --> 00:04:41.190
Este documento de política IAM contiene permisos

113
00:04:41.190 --> 00:04:43.590
que permiten a la identidad a la que está adjunta

114
00:04:43.590 --> 00:04:46.890
realizar cualquier acción relacionada con EC2.

115
00:04:46.890 --> 00:04:50.070
La estructura de una política IAM tiene un Efecto

116
00:04:50.070 --> 00:04:51.870
que es permitir o denegar.

117
00:04:51.870 --> 00:04:55.050
Y Acción que es la llamada a la API de AWS,

118
00:04:55.050 --> 00:04:58.080
en este caso, tenemos ec2:*

119
00:04:58.080 --> 00:05:01.560
que incluye todas las acciones relacionadas con EC2.

120
00:05:01.560 --> 00:05:04.320
Puede restringir esto para que sean llamadas específicas a la API.

121
00:05:04.320 --> 00:05:06.360
Por ejemplo, puedo restringir esta acción

122
00:05:06.360 --> 00:05:08.460
para ser sólo ejecutar instancias

123
00:05:08.460 --> 00:05:10.890
y entonces cualquier usuario con esta política adjunta

124
00:05:10.890 --> 00:05:13.830
sólo se le permitiría ejecutar instancias EC2

125
00:05:13.830 --> 00:05:17.220
pero no realizar otras tareas relacionadas con EC2.

126
00:05:17.220 --> 00:05:18.900
IAM le permite obtener muy granular

127
00:05:18.900 --> 00:05:20.850
con sus permisos de esa manera.

128
00:05:20.850 --> 00:05:23.460
Siguiendo con este ejemplo, vemos el recurso

129
00:05:23.460 --> 00:05:26.130
que le permite restringir contra qué recursos de AWS

130
00:05:26.130 --> 00:05:28.560
se permiten realizar las acciones.

131
00:05:28.560 --> 00:05:31.020
También puede incluir condiciones en sus políticas

132
00:05:31.020 --> 00:05:33.150
que pueden restringir aún más las acciones.

133
00:05:33.150 --> 00:05:36.600
Las políticas IAM también pueden adjuntarse a grupos.

134
00:05:36.600 --> 00:05:40.770
Los grupos IAM son simplemente agrupaciones de usuarios IAM.

135
00:05:40.770 --> 00:05:44.790
Puede adjuntar una política a un usuario específico o a un grupo.

136
00:05:44.790 --> 00:05:46.530
Cuando adjunta una política a un grupo,

137
00:05:46.530 --> 00:05:48.690
cualquier usuario que forme parte de ese grupo

138
00:05:48.690 --> 00:05:51.330
heredaría los permisos.

139
00:05:51.330 --> 00:05:53.400
Le recomendamos que como mejor práctica

140
00:05:53.400 --> 00:05:55.500
organice a los usuarios en grupos

141
00:05:55.500 --> 00:05:57.150
y asigne permisos a grupos

142
00:05:57.150 --> 00:06:00.300
en lugar de a usuarios individuales siempre que sea posible.

143
00:06:00.300 --> 00:06:03.270
Esto facilita la gestión cuando las personas cambian de función

144
00:06:03.270 --> 00:06:07.470
o varios usuarios necesitan que se les apliquen o revoquen permisos.

145
00:06:07.470 --> 00:06:09.000
Otra mejor práctica a seguir

146
00:06:09.000 --> 00:06:12.090
es que le recomendamos que cuando cree su cuenta AWS,

147
00:06:12.090 --> 00:06:14.250
configure MFA para el usuario raíz.

148
00:06:14.250 --> 00:06:17.880
A continuación, cree un usuario IAM con permisos de administrador.

149
00:06:17.880 --> 00:06:20.550
Cierre la sesión del usuario raíz y, a continuación, inicie sesión

150
00:06:20.550 --> 00:06:23.400
con el usuario IAM que acaba de crear.

151
00:06:23.400 --> 00:06:25.500
A partir de ahí, puede utilizar este usuario para crear

152
00:06:25.500 --> 00:06:29.130
el resto de usuarios y políticas de los grupos IAM.

153
00:06:29.130 --> 00:06:30.900
La razón por la que le sugerimos que haga esto es

154
00:06:30.900 --> 00:06:33.990
porque no puede aplicar una política al usuario raíz

155
00:06:33.990 --> 00:06:36.690
pero sí a un usuario IAM.

156
00:06:36.690 --> 00:06:39.990
Ahora que le he hablado de los usuarios, grupos y políticas IAM,

157
00:06:39.990 --> 00:06:42.750
hemos abordado esta parte de la gestión de acceso

158
00:06:42.750 --> 00:06:45.210
que necesitábamos para nuestra aplicación

159
00:06:45.210 --> 00:06:47.700
pero ¿qué pasa con esta parte?

160
00:06:47.700 --> 00:06:50.550
La instancia EC2 necesita credenciales para poder realizar

161
00:06:50.550 --> 00:06:53.700
la llamada firmada a la API dos S3 para leer

162
00:06:53.700 --> 00:06:55.860
y escribir imágenes de empleados.

163
00:06:55.860 --> 00:06:58.350
¿Estoy sugiriendo que cree un usuario IAM

164
00:06:58.350 --> 00:07:00.630
con un nombre de usuario y una contraseña para que la aplicación

165
00:07:00.630 --> 00:07:02.610
que se ejecuta en EC2 los utilice?

166
00:07:02.610 --> 00:07:04.560
No. No, no lo estoy haciendo.

167
00:07:04.560 --> 00:07:07.260
Aquí es donde el acceso basado en roles entra en escena.

168
00:07:07.260 --> 00:07:09.840
Próximamente aprenderemos sobre el acceso temporal

169
00:07:09.840 --> 00:07:11.460
que los roles IAM proporcionan

170
00:07:11.460 --> 00:07:13.833
y cómo se puede aplicar a este caso de uso aquí.